package io.satori.edu.student;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.format.annotation.DateTimeFormat;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;

import java.time.LocalDate;
import java.util.List;

@RestController //This annotation make this class request API layer
@RequestMapping(path = "/api/v1/students") //mapping to the endpoint url
public class StudentController { //Request API , Response API

    private final StudentService studentService;

    @Autowired //StudentService with @Service(Bean) will be auto-generated by Spring and autowired inject into StudentController
    public StudentController(StudentService studentService) {
        this.studentService = studentService;
    }

    @GetMapping //GET student
    public ResponseEntity<List<Student>> getStudents()
    {
        return ResponseEntity.ok(studentService.getStudent());
    }

    @GetMapping(path = "/faculty/{facultyId}")
    public ResponseEntity<List<Student>> getStudentsByFaculty(@PathVariable("facultyId") Integer facultyId)
    {
        return ResponseEntity.ok(studentService.getStudentInWhichFaculty(facultyId));
    }

    @GetMapping(path = "/{id}") //GET student by id
    public ResponseEntity<Student> getStudentById(@PathVariable("id") Integer id) //@PathVariable is extract the values (studentID) from the URL
    {
        return ResponseEntity.ok(studentService.getStudentById(id));
    }

//    @PostMapping(path = "/add/CohortId/{CohortId}") //POST student
//    public ResponseEntity<Student> addStudent(@RequestBody Student student, @PathVariable("CohortId") Integer CohortId) //@RequestBody is take the request body provided and map it into a student
//    {
//        Student newStudent =  studentService.addStudent(student,CohortId);
//        return  new ResponseEntity<>(newStudent, HttpStatus.CREATED);
//
//    }
    @PostMapping //POST student
    public ResponseEntity<Void> createStudent(
        @Valid @RequestBody Student student,
        @RequestParam Integer cohortId) //@RequestBody is take the request body provided and map it into a student
    {
        studentService.addStudent(student, cohortId);
        return new ResponseEntity<>(HttpStatus.CREATED);
    }

    @DeleteMapping(path = "/{id}") //Delete student by id
    public ResponseEntity<Void> deleteStudent(@PathVariable("id") Integer id) //@PathVariable is extract the values (studentID) from the URL
    {
        studentService.deleteStudent(id);
        return ResponseEntity.noContent().build();
    }

    @PutMapping(path = "/{id}") //Update student by id
    public ResponseEntity<Void> updateStudent(
        @PathVariable("id") Integer id, //@PathVariable is extract the values (studentID) from the URL
        @RequestParam(required = false) String name,  //@RequestParam is extract the query parameters from the URL. required = false mean is not required have parameter
        @RequestParam(required = false) String email,
        @RequestParam(required = false) Gender gender,
        @RequestParam(required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate dob,
        @RequestParam(required = false) Integer cohortId)
    {
        studentService.updateStudent(id, name, email, gender, dob, cohortId);
        return ResponseEntity.ok().build();
    }
}
